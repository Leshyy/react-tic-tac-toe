{"version":3,"sources":["logo.svg","cmps/Cell.jsx","cmps/GameBoard.jsx","pages/TicTacToeApp.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Cell","coord","onPlay","symbol","useState","isClicked","setIsClicked","cellBtn","useRef","useEffect","current","innerText","className","disabled","ref","onClick","GameBoard","gameBoard","map","row","i","cell","j","Math","random","TicTacToeApp","board","setBoard","gameIsOn","setGameIsOn","isMyTurn","setIsMyTurn","playCount","setPlayCount","isDraw","setIsDraw","pcPlay","setTimeout","pcPlayCoord","getEmptySpot","copyBoard","checkWin","length","cellCoord","didPlayerPlay","col","push","every","endGame","gameDoneMsg","alert","restartGame","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4178672.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useEffect, useRef, useState } from \"react\"\r\n\r\nexport function Cell({ coord, onPlay, symbol }) {\r\n\r\n    const [isClicked, setIsClicked] = useState(false)\r\n    const cellBtn = useRef()\r\n\r\n    useEffect(() => {\r\n        setIsClicked(!!cellBtn.current.innerText)\r\n    }, [])\r\n\r\n    const onCellClick = () => {\r\n        onPlay(coord)\r\n    }\r\n\r\n    return (\r\n        <section className=\"cell\">\r\n            <button disabled={isClicked} ref={cellBtn} onClick={() => onCellClick()}>{symbol}</button>\r\n\r\n        </section>\r\n    )\r\n}\r\n","import { Cell } from \"./Cell\";\r\n\r\nexport function GameBoard({ gameBoard, onPlay }) {\r\n    return (\r\n        <section className=\"game-board\">\r\n            {gameBoard.map((row, i) => (\r\n                row.map((cell, j) => (\r\n                    <Cell key={cell + Math.random()} onPlay={onPlay} coord={{ i, j }} symbol={cell} />\r\n                ))\r\n            ))}\r\n        </section>\r\n    )\r\n}\r\n","import { useState } from \"react\"\r\nimport { GameBoard } from \"../cmps/GameBoard\"\r\n\r\nexport function TicTacToeApp() {\r\n    const [board, setBoard] = useState(\r\n        [\r\n            ['', '', ''],\r\n            ['', '', ''],\r\n            ['', '', '']\r\n        ]\r\n    )\r\n    const [gameIsOn, setGameIsOn] = useState(true)\r\n    const [isMyTurn, setIsMyTurn] = useState(true)\r\n    const [playCount, setPlayCount] = useState(0)\r\n    const [isDraw, setIsDraw] = useState(false)\r\n\r\n    const onPlay = (cellCoord) => {\r\n        if (gameIsOn && isMyTurn) {\r\n            const copyBoard = [...board]\r\n            copyBoard[cellCoord.i][cellCoord.j] = 'X'\r\n            setBoard(copyBoard)\r\n            if (!checkWin(cellCoord, true)) {\r\n                setIsMyTurn(false)\r\n                pcPlay()\r\n                setPlayCount(playCount + 1)\r\n            }\r\n        }\r\n    }\r\n\r\n    const pcPlay = () => {\r\n        setTimeout(() => {\r\n            const pcPlayCoord = getEmptySpot()\r\n            const copyBoard = [...board]\r\n            setPlayCount(playCount + 1)\r\n            copyBoard[pcPlayCoord.i][pcPlayCoord.j] = 'O'\r\n            checkWin(pcPlayCoord, false)\r\n            setIsMyTurn(true)\r\n        }, 1000);\r\n    }\r\n\r\n    const getEmptySpot = () => {\r\n        for (let i = 0; i < board.length; i++) {\r\n            for (let j = 0; j < board[0].length; j++) {\r\n                const cell = board[i][j]\r\n                if (cell === '') {\r\n                    return { i, j }\r\n\r\n                }\r\n            }\r\n        }\r\n        return false\r\n\r\n    }\r\n\r\n\r\n    const checkWin = (cellCoord, didPlayerPlay) => {\r\n        const row = []\r\n        const col = []\r\n\r\n        for (let i = 0; i < board.length; i++) {\r\n            row.push(board[cellCoord.i][i])\r\n            col.push(board[i][cellCoord.j])\r\n        }\r\n\r\n        // check row col and diagonal and tie\r\n        if (row.every(cell => cell === 'X') || row.every(cell => cell === 'O')) {\r\n            endGame(didPlayerPlay)\r\n            return true\r\n        } else if (col.every(cell => cell === 'X') || col.every(cell => cell === 'O')) {\r\n            endGame(didPlayerPlay)\r\n            return true\r\n        } else if (board[0][0] === board[1][1] && board[1][1] === board[2][2] && board[0][0] !== '') {\r\n            endGame(didPlayerPlay)\r\n            return true\r\n        } else if (board[0][2] === board[1][1] && board[1][1] === board[2][0] && board[0][2] !== '') {\r\n            endGame(didPlayerPlay)\r\n            return true\r\n        } else if (!getEmptySpot()) {\r\n            setIsDraw(true)\r\n            endGame()\r\n            return true\r\n        } else return false\r\n    }\r\n\r\n    const endGame = (didPlayerPlay) => {\r\n        setGameIsOn(false)\r\n        let gameDoneMsg\r\n        if (!isDraw) {\r\n            gameDoneMsg = didPlayerPlay ? 'You Won!!' : 'You Lost :('\r\n        } else gameDoneMsg = 'Its a Draw!!!'\r\n        alert(gameDoneMsg)\r\n        restartGame()\r\n    }\r\n\r\n\r\n    const restartGame = () => {\r\n        setBoard([\r\n            ['', '', ''],\r\n            ['', '', ''],\r\n            ['', '', '']\r\n        ]\r\n        )\r\n        setPlayCount(0)\r\n        setIsMyTurn(true)\r\n        setGameIsOn(true)\r\n    }\r\n\r\n    return (\r\n\r\n        <section className=\"tic-tac-toe-app\">\r\n            <h1>TicTacToe</h1>\r\n            <GameBoard gameBoard={board} onPlay={onPlay} />\r\n\r\n        </section>\r\n    )\r\n}\r\n","import logo from './logo.svg';\nimport { TicTacToeApp } from './pages/TicTacToeApp';\nimport './styles/global.scss';\n\nexport function App() {\n  return (\n    <div className=\"App\">\n      <TicTacToeApp />\n    </div>\n  );\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}